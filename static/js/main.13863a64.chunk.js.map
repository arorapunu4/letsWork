{"version":3,"sources":["logo.svg","reducers/dashboardReducer.js","reducers/rootReducer.js","actions/service.js","pages/Dashboard.js","pages/connector.js","actions/DashboardData.js","App.js","registerServiceWorker.js","index.js","store.js"],"names":["module","exports","__webpack_require__","p","initialState","FirstData","combineReducers","dashboardReducer","state","arguments","length","undefined","action","type","Object","objectSpread","value","service","url","getAllAccountSummaryBalanceData","data","axios","get","Dashboard","props","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nextProps","console","log","newData","react_default","a","createElement","Fragment","Helmet","name","content","Component","connect","dispatch","api","then","res","catch","err","App","className","pages_Dashboard","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","es","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","configureStore","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.13863a64.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const initialState = {\n    FirstData: [],\n\n  };\n  \n  export default function(state = initialState, action) {\n    switch (action.type) {\n      case \"ACCOUNT_DATA_ALL\":\n        return {\n          ...state,\n          FirstData: action.value\n        };\n    \n      default:\n        return state;\n    }\n  }","import dashboardReducer from \"./dashboardReducer\";\nimport { combineReducers } from 'redux';\n//import simpleReducer from './simpleReducer';\n\nexport default combineReducers({\n  //simpleReducer\n  dashboardReducer:dashboardReducer\n});","import axios from \"axios\";\n\n\nexport default {\n    allAccountSummaryBalanceData(url) {\n        return {\n          getAllAccountSummaryBalanceData: data => axios.get(url)\n        };\n      },\n};","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\nimport { mapStateToProps, mapDispatchToProps } from \"./connector\";\nimport {Helmet} from 'react-helmet'\n//import { getAllAccountSummaryBalanceData } from \"../actions/DashboardData\";\nimport moment from \"moment\";\nclass Dashboard extends Component {\n  constructor(props){\n    super(props);\n  }\n  componentDidMount() {\n    this.props.getAllAccountSummaryBalanceData();\n  }\n  componentWillReceiveProps(nextProps) {\n    this.props = nextProps;\n    console.log(nextProps, \"-----nextProps-----\");\n  }\n  render() { \nconsole.log(this.props.newData,\"-----\")\n    return (\n      <>\n        <Helmet>\n    <title>Here's the Title!</title>\n    <meta name=\"description\" content=\"This is what you want to show as the page content in the Google SERP Listing\" />\n  </Helmet>\n\n       <h1>\nHiiii react app\n       </h1>\n\n      </>\n    )\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Dashboard);","import { getAllAccountSummaryBalanceData } from \"../actions/DashboardData\";\n\nexport const mapStateToProps = state => {\n  return {\n    newData: state.dashboardReducer,\n\n  };\n};\n\nexport const mapDispatchToProps = dispatch => {\n  return {\n    getAllAccountSummaryBalanceData: () => dispatch(getAllAccountSummaryBalanceData()),\n\n  };\n};","import api from \"./service\";\n\n\nexport const getAllAccountSummaryBalanceData = () => dispatch => {\n  return api\n    .allAccountSummaryBalanceData(\"https://hacker-news.firebaseio.com/v0/item/192327.json?print=pretty\")\n    .getAllAccountSummaryBalanceData(\"data\")\n    .then(res => {\n        return dispatch({\n          type: \"ACCOUNT_DATA_ALL\",\n          value: res.data\n        });\n     \n    })\n    .catch(err => {\n      // return dispatch({\n      //   type: \"ACCOUNT_SUMMARY_BALANCE_DATA_ERROR\",\n      //   value: \"error\"\n      // });\n    });\n};\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Dashboard from  \"./pages/Dashboard\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","/*\n src/index.js\n*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n <Provider store={configureStore()}>\n  <App />\n </Provider>,\n document.getElementById('root')\n);\nregisterServiceWorker();","/*\n * src/store.js\n * With initialState\n*/\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nimport {composeWithDevTools} from \"redux-devtools-extension\"\n\nexport default function configureStore(initialState={}) {\n return createStore(\n   rootReducer,\n   initialState,\n   composeWithDevTools( applyMiddleware(thunk))\n  \n );\n}"],"sourceRoot":""}